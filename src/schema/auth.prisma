model User {
  id String @id @default(nanoid())

  index Int @default(autoincrement())

  email    String  @unique
  username String? @unique

  agentIsAlive Boolean @default(true)

  authProviders AuthProvider[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  upvotedMarkets   MarketUpvotes[]   @relation("MarketUpvoters")
  downvotedMarkets MarketDownvotes[] @relation("MarketDownvoters")
  comments         Comment[]
  markets          Market[]
  notifications    Notification[]
  mentions         Comment[]         @relation("CommentMentions")
  marketEdits      MarketEdit[]

  invitedById String?
  invitedBy   User?   @relation("InvitedBy", fields: [invitedById], references: [id])
  invitees    User[]  @relation("InvitedBy")

  points Int @default(0)
}

model AuthProvider {
  provider     String
  accountId    String
  label        String
  scopes       String[]
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@id([userId, provider, accountId])
  @@unique([userId, provider, accountId])
}

model Session {
  key String @id @default(nanoid())

  user  User   @relation(fields: [email], references: [id], onDelete: Cascade)
  email String
}
