model Market {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title              String
    description        String
    resolutionCriteria String

    upvotes   Int @default(0)
    downvotes Int @default(0)

    upvoters   MarketUpvotes[]   @relation("MarketUpvoters")
    downvoters MarketDownvotes[] @relation("MarketDownvoters")
    predictions Prediction[]

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    comments     Comment[]
    Notification Notification[]
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
    marketId String

    content String

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
    parentId String?
    replies  Comment[] @relation("CommentReplies")

    mentions     User[]         @relation("CommentMentions")
    Notification Notification[]

    @@index([parentId])
    @@index([authorId])
    @@index([marketId])
}

model MarketUpvotes {
    market   Market @relation("MarketUpvoters", fields: [marketId], references: [id], onDelete: Cascade)
    marketId String
    user     User   @relation("MarketUpvoters", fields: [userId], references: [id], onDelete: Cascade)
    userId   String

    @@id([marketId, userId])
}

model MarketDownvotes {
    market   Market @relation("MarketDownvoters", fields: [marketId], references: [id], onDelete: Cascade)
    marketId String
    user     User   @relation("MarketDownvoters", fields: [userId], references: [id], onDelete: Cascade)
    userId   String

    @@id([marketId, userId])
}

model Notification {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    read      Boolean  @default(false)

    type NotificationType

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
    marketId String

    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String?

    @@index([userId])
    @@index([marketId])
    @@index([commentId])
}

enum NotificationType {
    MARKET_COMMENT
    COMMENT_REPLY
    MENTION
}

model Prediction {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    probability Float  // The user's estimated probability (0.0 to 1.0)

    market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
    marketId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([marketId, userId])  // One prediction per user per market
    @@index([userId])
    @@index([marketId])
}
