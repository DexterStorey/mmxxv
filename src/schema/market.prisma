model Market {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title              String
    description        String
    resolutionCriteria String

    upvotes   Int @default(0)
    downvotes Int @default(0)

    upvoters   MarketUpvotes[]   @relation("MarketUpvoters")
    downvoters MarketDownvotes[] @relation("MarketDownvoters")

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    comments Comment[]
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
    marketId String

    content String

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
    parentId String?
    replies  Comment[] @relation("CommentReplies")

    @@index([parentId])
}

model MarketUpvotes {
    market   Market @relation("MarketUpvoters", fields: [marketId], references: [id], onDelete: Cascade)
    marketId String
    user     User   @relation("MarketUpvoters", fields: [userId], references: [id])
    userId   String

    @@id([marketId, userId])
}

model MarketDownvotes {
    market   Market @relation("MarketDownvoters", fields: [marketId], references: [id], onDelete: Cascade)
    marketId String
    user     User   @relation("MarketDownvoters", fields: [userId], references: [id])
    userId   String

    @@id([marketId, userId])
}
